if(eventHub === undefined)
    var eventHub = new Vue();

Vue.component('%%COMPONENT_NAME%%', {
    mixins: [%%MIXINS%%],
    props: {
        //Current mode - create or update
        mode: {
            type: String,
            default: 'create' //'create' / 'update'
        },
        %%IF(PASS_ITEM)
        //Item
        item: {
            type: Object
        },%%
        %%IF(PASS_ID)
        //Item Identifier
        id: {
            type: String,
            default: ''
        },%%
        //App Identifier
        identifier: {
            type: String,
            default: ''
        },
        //Test Mode
        test: {
            type: Boolean,
            default: false
        },
        //Verbose Mode
        verbose: {
            type: Boolean,
            default: false
        },
    },
    data: function(){
        return {
            configObject: JSON.parse(JSON.stringify(document.siteConfig)),
            //Main item focused on in this component
            mainItem:{
            },
            //Sometimes, you need to manially recompute Vue computed properties
            recompute:{
                changed:false,
                paramMap: false
            },
            //Map of parameters, and vaios properties of each.
            paramMap:{
                /*
                 'paramName':{
                 //bool, whether to ignore this param completely on get, defaults to false
                 ignore: false,
                 //string, title to display, defaults to parameter name
                 title: 'paramName',
                 //bool, whether it can be edited, default true
                 edit: true,
                 //string, type (if editable). Valid types are "text"(default), "boolean", "date", "number", "email", "textArea", "select"
                 type: "text",
                 //bool, whether the item should be displayed (if it's not editable), default true
                 display: true,
                 //bool, whether to consider the item changed even if it wasn't
                 considerChanged: false,
                 //bool, will attempt to send the item even if it's not changed
                 required: false,
                 //What to do on item update
                 onUpdate: {
                     //bool, default false - do no send this key on update
                     ignore: false,
                     //function, if this item is sent, parse the value with this function before sending
                     parse: function(value){
                         return value;
                     },
                     //Validates value and either suceeds or returns false
                     validate: function(value){
                         return true;
                     }
                     //Encodes the value to send in encodeURIComponent
                     encodeURI: false
                 },
                 //List, required in case of a "select" type
                 list: [
                    {
                        <string, title> => <any, value>
                    }
                 ],
                 //In case of numbers, min
                 min: '',
                 //In case of numbers, max
                 max: '',
                 //In case of text, pattern
                 pattern: '',
                 //placeholder
                 placeholder: '',
                 //The name to send. Defaults to <paramName>
                 setName: 'paramName'
                 //Custom message on validation failure (if null, default message is "<paramName> failed validation")
                 validateFailureMessage: 'Parameter '+paramName+' failed validation!',
                 },
                 //function, parsing function on item get
                 parseOnGet: function(value){
                     return value;
                 },
                 //function, parsing function on item only when displaying
                 parseOnDisplay: function(value){
                     return value;
                 },
                 //function, parsing function on item change (if it can be edited)
                 parseOnChange: function(value){
                     return value;
                 },
                 //bool, displays item (after parsing) as HTML. Only if the item is displayed and not editable. Defaults to false
                 displayHTML: false
                 //object, if the type is "boolean" this allows you to modify the button
                 button: {
                    positive: 'Yes',
                    negative: 'No'
                 }
                 }
                 * */
            },
            //Whether the item is up to date
            upToDate: this.mode == 'create',
           //Whether we are currently initiating the item
           initiating: false,
           //Whether we are currently updating the item
           updating: false
        }
    },
    created:function(){
      //Register eventhub
      this.registerHub(eventHub);
      //Register events
      this.registerEvent('setResponse' ,this.handleItemSet);
      %%IF(PASS_ID)if(this.mode==='update')
          this.getItemInfo();%%
      %%IF(PASS_ITEM)this.setMainItem(this.item); %%
    },
    mounted:function(){
    },
    updated: function(){
        if(!this.upToDate && !this.initiating)
            this.getItemInfo();
    },
    computed:{
        changed: function(){
            if(this.recompute.changed)
                ;//Do nothing
            for(let i in this.mainItem){
                if(this.mainItem[i].original !== undefined && (this.mainItem[i].original != this.mainItem[i].current || this.paramMap[i].considerChanged))
                    return true;
            }
            return false;
        },
        itemHasInfo: function(){
            if(this.paramMap)
                ;//Do nothing

            for(let i in this.paramMap){
                if(!this.paramMap[i].edit && this.paramMap[i].display)
                    return true;
            }
            return false;
        },
    },
    methods:{
        //Sets main item
        setMainItem(item){

            for(let i in item){
                if(typeof item[i] === 'object')
                    continue;

                this.setSingleParam(i);

                if(!this.paramMap[i].ignore)
                    this.mainItem[i] =
                        this.paramMap[i].edit ?
                        {
                            original:this.paramMap[i].parseOnGet(item[i]),
                            current:this.paramMap[i].parseOnGet(item[i])
                        }
                            :
                            this.paramMap[i].parseOnGet(item[i]);
            }

            for(let i in this.paramMap){
                if((item[i] === undefined || typeof item[i] === 'object') && !this.paramMap[i].ignore){
                    this.setSingleParam(i);
                    let prefixes = i.split('.');
                    let target = JSON.parse(JSON.stringify(item));
                    let j = 0;
                    while(target !== undefined && typeof target === 'object' && prefixes[j] && target[prefixes[j]]!== undefined){
                        target = target[prefixes[j++]];
                    }
                    let newItem = (target !== undefined && typeof target !== 'object')? target : null;
                    this.setSingleMainItem(i,newItem);
                }
            }
        },
        //Helper function for setMainItem
        setSingleParam: function(i){
            if(!this.paramMap[i])
                this.paramMap[i] ={};
            this.paramMap[i].ignore = this.paramMap[i].ignore !== undefined ? this.paramMap[i].ignore : false;
            this.paramMap[i].title = this.paramMap[i].title !== undefined ? this.paramMap[i].title : i;
            this.paramMap[i].edit = this.paramMap[i].edit !== undefined ? this.paramMap[i].edit: true;
            this.paramMap[i].type = this.paramMap[i].type !== undefined ? this.paramMap[i].type : "text";
            this.paramMap[i].display = this.paramMap[i].display !== undefined ?  this.paramMap[i].display: true;
            this.paramMap[i].considerChanged = this.paramMap[i].considerChanged !== undefined ?  this.paramMap[i].considerChanged: false;
            this.paramMap[i].required = this.paramMap[i].required !== undefined ?  this.paramMap[i].required: false;

            if(!this.paramMap[i].onUpdate)
                this.paramMap[i].onUpdate = {};
            this.paramMap[i].onUpdate.ignore = this.paramMap[i].onUpdate.ignore !== undefined ? this.paramMap[i].onUpdate.ignore : false;
            this.paramMap[i].onUpdate.encodeURI = this.paramMap[i].onUpdate.encodeURI !== undefined ? this.paramMap[i].onUpdate.encodeURI : false;
            this.paramMap[i].onUpdate.parse = this.paramMap[i].onUpdate.parse !== undefined ? this.paramMap[i].onUpdate.parse : function(value){
                return value;
            };
            this.paramMap[i].onUpdate.validate = this.paramMap[i].onUpdate.validate !== undefined ? this.paramMap[i].onUpdate.validate : function(value){
                return true;
            };
            this.paramMap[i].onUpdate.validateFailureMessage = this.paramMap[i].onUpdate.validateFailureMessage !== undefined ? this.paramMap[i].onUpdate.validateFailureMessage : 'Parameter '+i+' failed validation!';
            this.paramMap[i].onUpdate.setName = this.paramMap[i].onUpdate.setName !== undefined ? this.paramMap[i].onUpdate.setName : i;

            this.paramMap[i].parseOnGet = this.paramMap[i].parseOnGet !== undefined ? this.paramMap[i].parseOnGet : function(value){
                return value;
            };
            this.paramMap[i].parseOnDisplay = this.paramMap[i].parseOnDisplay !== undefined ? this.paramMap[i].parseOnDisplay : function(value){
                return value;
            };
            this.paramMap[i].parseOnChange = this.paramMap[i].parseOnChange !== undefined ? this.paramMap[i].parseOnChange : function(value){
                return value;
            };
            this.paramMap[i].displayHTML = this.paramMap[i].displayHTML !== undefined ? this.paramMap[i].displayHTML : false;

            if(!this.paramMap[i].button)
                this.paramMap[i].button = {};
            this.paramMap[i].button.positive = this.paramMap[i].button.positive !== undefined ? this.paramMap[i].button.positive : 'Yes';
            this.paramMap[i].button.negative = this.paramMap[i].button.negative !== undefined ? this.paramMap[i].button.negative : 'No';
        },
        //Helper functin for setMainItem
        setSingleMainItem: function(i, item){
            this.mainItem[i] =
                this.paramMap[i].edit ?
                {
                    original:this.paramMap[i].parseOnGet(item),
                    current:this.paramMap[i].parseOnGet(item)
                }
                    :
                    this.paramMap[i].parseOnGet(item);
        },
        %%IF(PASS_ID)//Gets the info of the main item
        getItemInfo: function(){

            if(this.initiating){
                if(this.verbose)
                    console.log('Already getting main item info!!');
                return;
            }

            /* ---- TODO Add validity checks if relevant ---- */

            this.initiating = true;

            if(this.verbose)
                console.log('Getting item information!');

            //Data to be sent
            var data = new FormData();
            //TODO Add all that's needed here
            data.append('action', '%%API_GET_ACTION%%');

            this.apiRequest(
                data,
                '%%API_URL%%',
                'getResponse',
                {
                    'verbose': this.verbose,
                    'parseJSON':true,
                    'identifier':this.identifier
                }
            );
        },%%
        //Tries to update the item
        setItem: function(){

            if(this.initiating){
                if(this.verbose)
                    console.log('Still getting item info!');
                return;
            }

            //TODO Add all validation/checks here


            //Data to be sent
            var data = new FormData();
            data.append('action', (this.mode === 'create'? '%%API_CREATE_ACTION%%': '%%API_UPDATE_ACTION%%')); //TODO - might be the same set action
            if(this.test)
                data.append('req','test');

            let sendParams = {};

            for(let paramName in this.paramMap){

                let param = this.paramMap[paramName];
                let item = this.mainItem[paramName];

                if(
                    param.ignore ||
                    param.onUpdate.ignore ||
                    (item.current !== undefined && item.current === item.original && !param.considerChanged && !param.required)
                  )
                    continue;
                else if(item.current === undefined){
                    data.append(param.onUpdate.setName, item);
                    sendParams[param.onUpdate.setName] = item;
                    continue;
                }

                if(param.required && item.current === null){
                    let title = param.title? param.title : paramName;
                    alertLog(title+' must be set!','warning',this.$el);
                    return;
                }

                let paramValue = param.onUpdate.parse(item.current);

                if(!param.onUpdate.validate(paramValue)){
                    alertLog(param.onUpdate.validateFailureMessage,'warning',this.$el);
                    return;
                }

                if(param.onUpdate.encodeURI)
                    paramValue = encodeURIComponent(paramValue);

                data.append(param.onUpdate.setName, paramValue);
                sendParams[param.onUpdate.setName] = paramValue;
            }

            if(this.verbose)
                console.log('Setting item with parameters ',sendParams);

            this.apiRequest(
                data,
                '%%API_URL%%',
                'setResponse',
                {
                    'verbose': this.verbose,
                    'parseJSON':true,
                    'identifier':this.identifier
                }
            );
        },
        //Handles item  update
        handleItemSet: function(response){

            if(this.verbose)
                console.log('Received handleItemSet',response);

            if(this.identifier && (response.from !== this.identifier))
                return;

            this.updating = false;

            if(response.from)
                response = response.content;

            if (response === 'AUTHENTICATION_FAILURE') {
                alertLog('Not authorized to '+(this.mode === 'create'? '%%API_CREATE_ACTION%%': '%%API_UPDATE_ACTION%%')+'! Check to see if you are logged in.','error',this.$el);
                return;
            }

            /* Multi-stage response

                let goOn = false;

                if(typeof response === 'object')
                    goOn = true;
                else
                    alertLog('Illegal '+(this.mode === 'create'? '%%API_CREATE_ACTION%%': '%%API_UPDATE_ACTION%%')+' response!','error',this.$el);

                if(!goOn)
                    return;
                else
                    goOn = false;

                switch (response.) { //TODO Add response stage
                    case -1:
                        alertLog('Server error!','error',this.$el);
                        break;
                    default:
                        goOn = true;
                        break;
                }

             */

            /* Single-stage response

                 switch (response) {
                    case -1:
                        alertLog('Server error!','error',this.$el);
                        break;
                    case 0:
                        alertLog('Item updated!','success',this.$el);
                        break;
                    default:
                        alertLog('Unknown '+(this.mode === 'create'? '%%API_CREATE_ACTION%%': '%%API_UPDATE_ACTION%%')+' response '+response,'error',this.$el);
                        break;
                }

             */

        },
        %%IF(PASS_ID)//Handles the response to the get request
        handleItemGet: function(response){

            if(this.verbose)
                console.log('Received handleItemGet',response);

            if(this.identifier && response.from !== this.identifier)
                return;

            this.initiating = false;

            if(response.from)
                response = response.content;

            if(typeof response === 'object'){
                this.setMainItem(response);
                this.initiating = false;
                this.upToDate = true;
            }
        },%%
        //Resets inputs
        resetInputs: function(){
            for(let key in this.mainItem){
                if(this.mainItem[key] && this.mainItem[key]['original'] !== undefined){
                    this.mainItem[key]['current'] = this.mainItem[key]['original'];
                }
            }
            this.recompute.changed = ! this.recompute.changed;
            this.$forceUpdate();
        },
        //Saves inputs as the actual data (in case of a successful update or whatnot)
        setInputsAsCurrent: function(){
            for(let key in this.mainItem){
                if(this.mainItem[key] && this.mainItem[key]['original'] !== undefined){
                    this.mainItem[key]['original'] = this.mainItem[key]['current'];
                }
            }
            this.recompute.changed = ! this.recompute.changed;
            this.$forceUpdate();
        }
    },
    watch: {
    },
    template: `
    <div class="%%COMPONENT_NAME%%">
        <div class="wrapper">

            <div class="info message-info-2" v-if="this.itemHasInfo">
                <div
                 v-for="(item, key) in mainItem"
                 v-if="!paramMap[key].edit && paramMap[key].display ">

                    <span class="title" v-text="paramMap[key].title? paramMap[key].title : key"></span>

                    <span class="value" v-if="!paramMap[key].displayHTML" v-text="paramMap[key].parseOnDisplay(item)"></span>
                    <span class="value" v-else="" v-html="paramMap[key].parseOnDisplay(item)"></span>

                </div>
            </div>

           <form class="article-info-editor" v-if="currentMode !== 'view' && (currentMode === 'create' || initiated)">
               <div
               v-for="(item, key) in mainItem"
               v-if="paramMap[key].edit"
               :class="[{changed:(item.current !== item.original || paramMap[key].considerChanged)},key.replace('.','-'),paramMap[key].type]"
               >

                   <span class="title" v-text="paramMap[key].title? paramMap[key].title : key"></span>

                   <input
                    v-if="!paramMap[key].type || ['text','date','number','email'].indexOf(paramMap[key].type) !== -1"
                    class="item-param"
                    :class="item-param"
                    :type="paramMap[key].type"
                    :min="(['date','number'].indexOf(paramMap[key].type) !== -1) && (paramMap[key].min !== undefined) ? paramMap[key].min : false"
                    :max="(['date','number'].indexOf(paramMap[key].type) !== -1) && (paramMap[key].max !== undefined)  ? paramMap[key].max : false"
                    :pattern="(['text'].indexOf(paramMap[key].type) !== -1) && (paramMap[key].pattern !== undefined)  ? paramMap[key].pattern : false"
                    :placeholder="paramMap[key].placeholder !== undefined  ? paramMap[key].placeholder : false"
                    v-model:value="item.current"
                    @change="item.current = paramMap[key].parseOnChange($event.target.value);recompute.changed = ! recompute.changed"
                   >
                   <button
                   v-else-if="paramMap[key].type === 'boolean'"
                   class="item-param"
                   v-text="item.current?(paramMap[key].button.positive? paramMap[key].button.positive : 'Yes'):(paramMap[key].button.negative? paramMap[key].button.negative : 'No')"
                    @click.prevent="item.current = paramMap[key].parseOnChange(!item.current);recompute.changed = ! recompute.changed"
                    ></button>

                   <textarea
                   v-else-if="paramMap[key].type === 'textArea'"
                   class="item-param"
                    :placeholder="paramMap[key].placeholder !== undefined  ? paramMap[key].placeholder : false"
                    v-model:value="item.current"
                    @change="item.current = paramMap[key].parseOnChange($event.target.value);recompute.changed = ! recompute.changed"
                    ></textarea>

                   <select
                   v-else-if="paramMap[key].type === 'select'"
                   class="item-param"
                    v-model:value="item.current"
                    @change="item.current = paramMap[key].parseOnChange($event.target.value);recompute.changed = ! recompute.changed"
                    >
                       <option v-for="item in paramMap[key].list" :value="item.value" v-text="item.title? item.title: item.value"></option>
                    </select>

               </div>

           </form>

            <div class="control-buttons" v-if="changed">
                <button  v-text="this.mode === 'create' ? 'Create' :'Update'" @click.prevent="setItem()" class="positive-1"></button>
                <button v-text="'Reset'" @click.prevent="resetInputs()" class="cancel-1"></button>
            </div>

        </div>
    </div>
    `
});