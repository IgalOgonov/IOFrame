<?php
/* The functions in this
 *
 * */
namespace IOFrame\Util{

    define('templateFunctions',true);

    if(!defined('helperFunctions'))
        require __DIR__ . '/../../IOFrame/util/helperFunctions.php';

    require_once __DIR__ . '/../../main/definitions.php';

    /**
     * Returns an item, generated by a template
     * @param string $template The template itself.
     *                         Is a text file, where there are two types of template variables:
     *                         a.   Normal variables, denoted %%VARIABLE_NAME%% (obviously whatever inside the dobule percentage
     *                              signs - changes). Those are replaced by stuff from $params, or are removed when not found.
     *                         b.   Conditional blocks, denoted %%IF(VARIABLE_NAME)<anything except "%%" goes here>%%.
     *                              Those blocks will only be inserted if VARIABLE_NAME is both provided, and its value isn't false (weak comparison).
     *                         The rest of the text isn't touched.
     *                         Normal blocks CAN be placed inside conditional blocks, but nested conditional blocks are not supported
     * @param array $variables Names of variables inside the template that need to be replaced, or IF blocks that need to be kept,
     *                         of the form: [
     *                              'VARIABLE_NAME':<string, value>,
     *                              'IF_BLOCK_VARIABLE_NAME':<bool, whether to keep it>
     *                          ]
     *                         Notice no variable names here have '%%' anywhere in them.
     *                         Any variables or IF blocks which are left out, will be replaced by an empty string in the template.
     *                         Anything inside the template that is of a valid IF_BLOCK or REGULAR_VARIABLE (matches the regex "/%%[A-Z0-9_]+%%/")
     *                         will be treated as such, and deleted.
     * @param array $params
     *
     * @throws \Exception In case an IF block in the template is left unclosed
     * @return string
     */
    function itemFromTemplate($template, array $variables ,$params = []){

        $test = isset($params['test'])? $params['test'] : false;
        $verbose = isset($params['verbose'])?
            $params['verbose'] : $test ?
                true : false;

        //First, handle all the normal variables
        foreach($variables as $variable=>$value){
            //Normal variables
            if(gettype($value) === 'string'){
                if($verbose)
                    echo 'Replacing all variables '.$variable.' with '.$value.EOL.EOL;
                $template = str_replace('%%'.$variable.'%%',$value,$template);
                //We want to take care of normal variables first
                unset($variables[$variable]);
            }
        }
        //Then, clean up anything that's left of normal variables
        $template = preg_replace('/\%\%[A-Z0-9_]+\%\%/','',$template);

        //IF blocks
        foreach($variables as $variable=>$value){
            //No need to touch anything that's false
            if(!$value)
                continue;
            //Next comes the php equivalent of a DO-WHILE
            $search = true;
            $currentOffset = 0;

            while($search){
                $removedCharacters = 0;
                $offset = strpos($template,'%%IF('.$variable.')',$currentOffset);
                if($offset !== false){

                    if($verbose)
                        echo 'IF block '.$variable.'  found at offset '.$offset.': ';

                    $endIf = strpos($template,'%%',$offset + 2);
                    if($endIf === false)
                        throw new \Exception('The template contains an unclosed IF block!');

                    if($verbose)
                        echo 'If block closes: '.$endIf.EOL.EOL;

                    //Remove the closing block
                    $condLength = strlen('%%IF('.$variable.')');
                    $template = substr($template,0,$offset).
                        substr($template,$offset+$condLength,$endIf - $offset - $condLength).
                        substr($template,$endIf+2);

                    $removedCharacters += 2 + strlen('%%IF('.$variable.')');

                    //No need to start searching from the start every time;
                    $currentOffset = $endIf + 2 - $removedCharacters;
                }
                else
                    $search = false;
            }
        }

        //Clean up remaining IF blocks
        $search = true;
        while($search){
            $indexArray = [];
            $pattern = '/\%\%IF\([A-Z0-9_]+\)/';
            preg_match($pattern, $template, $indexArray, PREG_OFFSET_CAPTURE);
            $removedCharacters = 0;

            if(count($indexArray) > 0)
                foreach($indexArray as $arr){
                    $cond = $arr[0];
                    $offset = $arr[1]-$removedCharacters;
                    $endIf = strpos($template,'%%',$offset+2);
                    if($endIf === false)
                        throw new \Exception('The template contains an unclosed IF block!');

                    if($verbose)
                        echo 'Deleting condition '.$cond.'starting at offset '.($offset).' and ending at '.($endIf).EOL.EOL;

                    $template = substr($template,0,$offset).
                        substr($template,$endIf+2);

                    $removedCharacters += $endIf + 2 - $offset;
                }
            else
                $search = false;
        }

        return $template;
    }
}
