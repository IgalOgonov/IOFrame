Instead of writing the full standards, I will write each PSR, and specify the diviations/additions from each one in the format:

{<PSR number>:
	{
	Diviation section ID, as seen on php-fig.org (eg 2.1 would be '21-php-tags'):
		"Diviation explanation>"
	}
}

Note that despite most PSRs being mentioned, not all of the things they describe are even included in the Framework yet.

If a PSR appears here, it also means all future additions to the CORE framework need to follow this PSR (dependencies and/or plugins not included).

If a PSR number is not specified, it means the standard is not explicidely endorsed (probably because it isnt an accepted one). That being said, feel free to follow it either way.

This document mainly relaxes the original PSRs, replacing MUST with SHOULD or MAY in most cases.

Standards specifiction begins under the line consisting of the symbol #, repeated at least 4 times.
"#EOL" indicates END OF LINE.
####
{
1:
	{
	'23-side-effects':
		"As this section uses SHOULD, rather than MUST, this is not a big diviation.#EOL
		A class SHOULD include files of classes/interfaces/traits/etc on which it has dependencies, using require - not require_once!.#EOL
		The dependency files SHOULD contain new symbol declarations (specified bellow), but SHOULD NOT have any additional side effects.#EOL
		Each file that is meant to be included MUST define its own name without the extension on top, IF it's a class
		- see examples in all handlers.#EOL
		If it is not a class, it MAY omit setting an include lock, and as such get required using require_once.#EOL
		However, the last line only applies to files that are expected to be included a very limited amount of times in 1 sequence.#EOL
		This is done in order to check includes, just like it used to be (is) done in C++."
	,	
	'3-namespace-and-class-names':
		"Class/Interface/Trait names SHOULD be declared in camelCase (rather than StudlyCaps)."
	},
2:
	{
	'1-overview':
		"* Identing MAY be done using either 4 spaces, or tabs.#EOL
		* Opening braces for classes SHOULD go on the same line, and closing braces SHOULD go on the next line after the body.#EOL
		* Control structure keywords MAY have one space after them.#EOL
		* Opening braces for control structures SHOULD go on the same line, and closing braces SHOULD go on the next line after the body.#EOL
		* Opening parentheses for control structures MAY have a space after them, and closing parentheses for control structures MAY have a space before."
	,
	'22-files':
		"The closing ?> tag MAY be omitted from files containing only PHP"
	,	
	'24-indenting':
		"Identing MAY be done using either 4 spaces, or tabs."
	,
	'41-extends-and-implements':
		"Opening braces for classes SHOULD go on the same line, and closing braces SHOULD go on the next line after the body."
	,
	'42-properties':
		"Visibility MUST be declared on all properties, EXCEPT "public" properties."
	,
	'43-methods':
		"Visibility MUST be declared on all methods, EXCEPT "public" methods."
	,
	'44-method-arguments':
		"Visibility MUST be declared on all methods, EXCEPT "public" methods."
	,
	'46-method-and-function-calls':
		"Substitute every MUST for SHOULD."
	,
	'6-closures':
		"Substitute every MUST for SHOULD.#EOL
		Closure arguments with default values MUST go at the end of the argument list."
	},
3:
	{
	'1-specification':
		"The internal logger for IOFrame is PSR-3 complient (monolog). Any additional loggers SHOULD be PSR-3 complient (but only one such logger is REQUIRED to be available - the internal logger)"
	},
4:
	{
	'1-overview':
		"Autoloading SHOULD be avoided, and instead all neccessury files SHOULD be included manually where they are needed.#EOL
		The reason for this is because, despite the convinience it offers (and it offers a lot of convinience), I consider the drawbacks to outweight it.#EOL
		The main one is lack of explicit includes, that would otherwise serve as partial documentation for the file.#EOL
		A developer that wants to learn the code can go down the include chain, and every external class is explicitly denoted as such, helping code reusability.#EOL
		For those reasons mainly, and a few smaller ones, I would RECOMMEND taking a few extra seconds to write out includes at the head of each file and the namespaces before each class object/definition, explicidely.#EOL
		If usage of autoloader is present, then it should follow the PSR."
	},
6:	{},
7:	{},
11:	{},
13:	{},
15:	{},
16:	{},
17:	{},
18:	{},
}